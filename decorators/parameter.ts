//参数装饰器
// 在参数传入前执行
//主要用途是用来监视，修改或者替换方法或者类的参数定义
// 参数装饰器可以用于实现多种功能和扩展，下面列举了几个常见的用途：
// 1. 参数验证和校验：参数装饰器可以用于在函数或方法调用之前验证和校验参数的有效性。通过在参数装饰器中添加验证逻辑，可以检查参数的类型、范围、格式等，以确保传入的参数符合预期。
// 2. 日志记录：参数装饰器可以用于实现日志记录的功能。通过在参数装饰器中添加日志输出的逻辑，可以记录函数或方法的参数信息，例如参数的值、传入时间等，以便后续的调试和分析。
// 3. 转换和适配：参数装饰器可以用于在函数或方法调用之前对参数进行转换和适配。通过在参数装饰器中添加转换逻辑，可以将参数从一种类型或格式转换为另一种类型或格式，以满足特定的需求。
// 4. 缓存和性能优化：参数装饰器可以用于实现缓存和性能优化的功能。通过在参数装饰器中添加缓存逻辑，可以根据参数的值来缓存函数或方法的结果，避免重复计算或重复请求，提高性能和效率。
// 5. 权限控制和安全性：参数装饰器可以用于实现权限控制和安全性的功能。通过在参数装饰器中添加权限验证逻辑，可以对函数或方法的参数进行访问控制，确保只有具有相应权限的用户可以访问敏感数据或执行特定操作。
// 这些只是参数装饰器的一些常见用途，实际上你可以根据需求和场景进行自定义的功能扩展。参数装饰器提供了在函数或方法的参数级别上进行操作和扩展的能力，可以帮助你实现更灵活和可复用的代码结构。
ParameterDecorator


function ParamDecorator(target: any, methodName: string, parameterIndex: number) {
    console.log("Decorating method", methodName);
    console.log("Decorating parameter", parameterIndex);
    console.log("Decorating target", target);
    
}



class A {
    method(@ParamDecorator p1: string) {

    }
}

const a  = 